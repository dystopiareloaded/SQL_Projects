Create database ecommerce;

USE ecommerce;

-- Basic Queries

-- 1. List all unique cities where customers are located.

SELECT DISTINCT customer_city from customers;

-- 2. Count the number of orders placed in 2017.

SELECT COUNT(order_id) FROM orders WHERE YEAR(order_purchase_timestamp) = 2017;

-- 3. Find the total sales per category.
SELECT products.`product category` AS category, 
       round(SUM(payments.payment_value),2) AS sales 
FROM products 
JOIN order_items ON products.product_id = order_items.product_id 
JOIN payments ON payments.order_id = order_items.order_id
GROUP BY products.`product category`;

-- 4. Calculate the percentage of orders that were paid in installments.

SELECT (SUM(case when payment_installments >= 1 then 1
else 0 end))/COUNT(*)*100 from payments;



-- 5. Count the number of customers from each state. 

SELECT customer_state, COUNT(customer_id)
FROM customers 
GROUP BY customer_state;

-- Intermediate Queries

-- 1. Calculate the number of orders per month in 2018.

SELECT MONTHNAME(order_purchase_timestamp) AS months, COUNT(order_id) AS order_counts
FROM orders WHERE YEAR(order_purchase_timestamp) = 2018
GROUP BY months;

-- 2. Find the average number of products per order, grouped by customer city.

WITH count_per_order AS
(SELECT orders.order_id, orders.customer_id, COUNT(order_items.order_id) AS oc
FROM orders JOIN order_items
ON orders.order_id = order_items.order_id
GROUP BY orders.order_id, orders.customer_id)

SELECT customers.customer_city, round(avg(count_per_order.oc),2) average_orders
FROM customers JOIN count_per_order
ON customers.customer_id = count_per_order.customer_id
group by customers.customer_city order by average_orders desc;

-- 3. Calculate the percentage of total revenue contributed by each product category.

SELECT upper(products.`product category`) AS category, 
       ROUND((SUM(payments.payment_value)/(select sum(payment_value) from payments))*100, 2) AS sales_percentage
FROM products 
JOIN order_items ON products.product_id = order_items.product_id 
JOIN payments ON payments.order_id = order_items.order_id
GROUP BY products.`product category` order by sales_percentage desc;

-- 4. Identify the correlation between product price and the number of times a product has been purchased.

SELECT products.`product category`,
COUNT(order_items.product_id),
ROUND(avg(order_items.price),2)
FROM products JOIN order_items
ON products.product_id = order_items.product_id
GROUP BY products.`product category`;

-- 5. Calculate the total revenue generated by each seller, and rank them by revenue.

SELECT *, DENSE_RANK() OVER(order by revenue desc) AS rn FROM
(SELECT order_items.seller_id, SUM(payments.payment_value) AS revenue
FROM order_items JOIN payments
ON order_items.order_id = payments.order_id
GROUP BY order_items.seller_id) AS a;

-- Advanced Queries

-- 1. Calculate the moving average of order values for each customer over their order history.

SELECT customer_id, order_purchase_timestamp, payment,
avg(payment) OVER(PARTITION BY customer_id ORDER BY order_purchase_timestamp
					ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS mov_avg
FROM
(SELECT orders.customer_id, orders.order_purchase_timestamp,
payments.payment_value as payment
FROM payments JOIN orders
ON payments.order_id = orders.order_id) AS a;

-- 2. Calculate the cumulative sales per month for each year.
SELECT years, months, payment, sum(payment) OVER(ORDER BY years, months) AS cumulative_sales
FROM
(SELECT YEAR(orders.order_purchase_timestamp) AS years,
MONTH(orders.order_purchase_timestamp) AS months,
ROUND(SUM(payments.payment_value),2) AS payment FROM orders JOIN payments
ON orders.order_id = payments.order_id
GROUP BY years, months ORDER BY years, months) as a;


-- 3. Calculate the year-over-year growth rate of total sales.

WITH a AS(SELECT YEAR(orders.order_purchase_timestamp) AS years,
ROUND(SUM(payments.payment_value),2) AS payment FROM orders JOIN payments
ON orders.order_id = payments.order_id
GROUP BY years ORDER BY years)

SELECT years, payment, LAG(payment) OVER(ORDER BY years) AS previous_year, ((payment - lag(payment, 1) OVER(ORDER BY years))/
lag(payment, 1) OVER(ORDER BY years)) * 100 AS yoy_percentage_growth FROM a;

-- 4. Calculate the retention rate of customers, defined as the percentage of customers who make another purchase within 6 months of their first purchase.

WITH a AS (SELECT customers.customer_id,
MIN(orders.order_purchase_timestamp) AS first_order
FROM customers JOIN orders
ON customers.customer_id = orders.customer_id
GROUP BY customers.customer_id),

b as (SELECT a.customer_id, COUNT(DISTINCT orders.order_purchase_timestamp) AS next_order
FROM a JOIN orders 
ON orders.customer_id = a.customer_id
AND orders.order_purchase_timestamp > first_order
AND orders.order_purchase_timestamp < DATE_ADD(first_order, interval 6 month)
GROUP BY a.customer_id)

SELECT 100 * (COUNT( DISTINCT a.customer_id)/COUNT(DISTINCT b.customer_id))
FROM a left join b
ON a.customer_id = b.customer_id;



-- 5. Identify the top 3 customers who spent the most money in each year.

SELECT years, customer_id, payment, d_rank 
FROM 
(SELECT YEAR(orders.order_purchase_timestamp) AS years,
orders.customer_id,
SUM(payments.payment_value) AS payment,
DENSE_RANK() OVER(PARTITION BY YEAR(orders.order_purchase_timestamp) 
					ORDER BY SUM(payments.payment_value) DESC) AS d_rank
FROM orders JOIN Payments
ON payments.order_id = orders.order_id
GROUP BY YEAR(orders.order_purchase_timestamp),
orders.customer_id) AS a
WHERE d_rank <=3 ;

